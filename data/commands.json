[
  {
    "id": "javascript",
    "title": "JavaScript",
    "description": "A high-level, interpreted programming language that conforms to the ECMAScript specification",
    "icon": "code",
    "colorClass": "bg-yellow-500",
    "categories": [
      {
        "name": "Variables & Data Types",
        "commands": [
          {
            "syntax": "const variable = value;",
            "description": "Declares a constant variable that cannot be reassigned"
          },
          {
            "syntax": "let variable = value;",
            "description": "Declares a block-scoped variable that can be reassigned"
          },
          {
            "syntax": "var variable = value;",
            "description": "Declares a function-scoped variable (older syntax)"
          },
          {
            "syntax": "typeof value",
            "description": "Returns the type of a value as a string"
          },
          {
            "syntax": "Number(value)",
            "description": "Converts a value to a number"
          },
          {
            "syntax": "String(value)",
            "description": "Converts a value to a string"
          },
          {
            "syntax": "Boolean(value)",
            "description": "Converts a value to a boolean"
          }
        ]
      },
      {
        "name": "Functions",
        "commands": [
          {
            "syntax": "function name(params) { }",
            "description": "Declares a function with the specified parameters"
          },
          {
            "syntax": "const name = function(params) { }",
            "description": "Creates a function expression"
          },
          {
            "syntax": "const name = (params) => { }",
            "description": "Creates an arrow function"
          },
          {
            "syntax": "return value;",
            "description": "Returns a value from a function"
          },
          {
            "syntax": "function* generator() { yield value; }",
            "description": "Declares a generator function"
          }
        ]
      },
      {
        "name": "Arrays",
        "commands": [
          {
            "syntax": "const array = [item1, item2, ...];",
            "description": "Creates an array with the specified items"
          },
          {
            "syntax": "array.length",
            "description": "Returns the number of elements in an array"
          },
          {
            "syntax": "array.push(item)",
            "description": "Adds one or more elements to the end of an array"
          },
          {
            "syntax": "array.pop()",
            "description": "Removes the last element from an array"
          },
          {
            "syntax": "array.unshift(item)",
            "description": "Adds one or more elements to the beginning of an array"
          },
          {
            "syntax": "array.shift()",
            "description": "Removes the first element from an array"
          },
          {
            "syntax": "array.slice(start, end)",
            "description": "Returns a shallow copy of a portion of an array"
          },
          {
            "syntax": "array.splice(start, deleteCount, item1, ...)",
            "description": "Changes the contents of an array by removing or replacing existing elements"
          },
          {
            "syntax": "array.map(callback)",
            "description": "Creates a new array with the results of calling a function for every array element"
          },
          {
            "syntax": "array.filter(callback)",
            "description": "Creates a new array with elements that pass the test"
          },
          {
            "syntax": "array.reduce(callback, initialValue)",
            "description": "Reduces the array to a single value by executing a callback function"
          }
        ]
      },
      {
        "name": "Objects",
        "commands": [
          {
            "syntax": "const obj = { key: value };",
            "description": "Creates an object with the specified properties"
          },
          {
            "syntax": "obj.property",
            "description": "Accesses a property of an object using dot notation"
          },
          {
            "syntax": "obj['property']",
            "description": "Accesses a property of an object using bracket notation"
          },
          {
            "syntax": "Object.keys(obj)",
            "description": "Returns an array of an object's own property names"
          },
          {
            "syntax": "Object.values(obj)",
            "description": "Returns an array of an object's own property values"
          },
          {
            "syntax": "Object.entries(obj)",
            "description": "Returns an array of an object's own [key, value] pairs"
          },
          {
            "syntax": "{ ...obj1, ...obj2 }",
            "description": "Merges two or more objects using the spread operator"
          }
        ]
      },
      {
        "name": "Asynchronous JavaScript",
        "commands": [
          {
            "syntax": "setTimeout(callback, delay)",
            "description": "Calls a function after a specified delay (in milliseconds)"
          },
          {
            "syntax": "setInterval(callback, delay)",
            "description": "Calls a function repeatedly at specified intervals"
          },
          {
            "syntax": "Promise",
            "description": "Represents a value that may not be available yet"
          },
          {
            "syntax": "async function name() { }",
            "description": "Declares an asynchronous function that returns a Promise"
          },
          {
            "syntax": "await expression",
            "description": "Pauses the execution of an async function until a Promise is settled"
          },
          {
            "syntax": "fetch(url)",
            "description": "Starts the process of fetching a resource from the network"
          },
          {
            "syntax": "try { } catch (error) { }",
            "description": "Handles errors in synchronous and asynchronous code"
          }
        ]
      },
      {
        "name": "DOM Manipulation",
        "commands": [
          {
            "syntax": "document.getElementById('id')",
            "description": "Returns the element with the specified ID"
          },
          {
            "syntax": "document.querySelector('selector')",
            "description": "Returns the first element that matches the specified CSS selector"
          },
          {
            "syntax": "document.querySelectorAll('selector')",
            "description": "Returns all elements that match the specified CSS selector"
          },
          {
            "syntax": "element.innerHTML = 'content'",
            "description": "Sets or gets the HTML content of an element"
          },
          {
            "syntax": "element.textContent = 'text'",
            "description": "Sets or gets the text content of an element"
          },
          {
            "syntax": "element.classList.add('class')",
            "description": "Adds a class to an element"
          },
          {
            "syntax": "element.classList.remove('class')",
            "description": "Removes a class from an element"
          },
          {
            "syntax": "element.classList.toggle('class')",
            "description": "Toggles a class on an element"
          },
          {
            "syntax": "element.addEventListener('event', callback)",
            "description": "Attaches an event handler to an element"
          }
        ]
      }
    ],
    "examples": [
      {
        "title": "Fetch API Example",
        "code": "async function fetchData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error;\n  }\n}\n\n// Usage\nfetchData()\n  .then(data => {\n    console.log('Data received:', data);\n    // Process the data\n  })\n  .catch(error => {\n    console.error('Failed to fetch data:', error);\n    // Handle the error\n  });"
      },
      {
        "title": "DOM Manipulation",
        "code": "// Select elements\nconst button = document.getElementById('myButton');\nconst output = document.querySelector('.output');\nconst items = document.querySelectorAll('.item');\n\n// Add event listener\nbutton.addEventListener('click', () => {\n  // Create a new element\n  const element = document.createElement('div');\n  element.textContent = 'Hello World';\n  element.classList.add('new-item');\n  \n  // Append to the DOM\n  output.appendChild(element);\n  \n  // Update styles\n  element.style.color = 'blue';\n  element.style.fontWeight = 'bold';\n  \n  // Toggle a class on existing items\n  items.forEach(item => {\n    item.classList.toggle('highlighted');\n  });\n});"
      },
      {
        "title": "Array Methods",
        "code": "const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n// Map: Double each number\nconst doubled = numbers.map(num => num * 2);\nconsole.log('Doubled:', doubled);\n\n// Filter: Get only even numbers\nconst evens = numbers.filter(num => num % 2 === 0);\nconsole.log('Even numbers:', evens);\n\n// Reduce: Sum all numbers\nconst sum = numbers.reduce((total, num) => total + num, 0);\nconsole.log('Sum:', sum);\n\n// Find: Get the first number greater than 5\nconst firstGreaterThanFive = numbers.find(num => num > 5);\nconsole.log('First > 5:', firstGreaterThanFive);\n\n// Some: Check if any number is greater than 9\nconst hasGreaterThanNine = numbers.some(num => num > 9);\nconsole.log('Has > 9:', hasGreaterThanNine);\n\n// Every: Check if all numbers are positive\nconst allPositive = numbers.every(num => num > 0);\nconsole.log('All positive:', allPositive);"
      }
    ],
    "resources": [
      {
        "title": "MDN Web Docs - JavaScript",
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript"
      },
      {
        "title": "JavaScript.info",
        "url": "https://javascript.info/"
      },
      {
        "title": "Eloquent JavaScript",
        "url": "https://eloquentjavascript.net/"
      }
    ]
  },
  {
    "id": "typescript",
    "title": "TypeScript",
    "description": "A strongly typed programming language that builds on JavaScript",
    "icon": "code",
    "colorClass": "bg-blue-500",
    "categories": [
      {
        "name": "Basic Types",
        "commands": [
          {
            "syntax": "let variable: string = 'value';",
            "description": "Declares a variable with a string type"
          },
          {
            "syntax": "let variable: number = 42;",
            "description": "Declares a variable with a number type"
          },
          {
            "syntax": "let variable: boolean = true;",
            "description": "Declares a variable with a boolean type"
          },
          {
            "syntax": "let variable: any = value;",
            "description": "Declares a variable that can be of any type"
          },
          {
            "syntax": "let variable: unknown = value;",
            "description": "Declares a variable with an unknown type (safer than any)"
          },
          {
            "syntax": "let variable: string[] = ['a', 'b'];",
            "description": "Declares an array of strings"
          },
          {
            "syntax": "let variable: Array<number> = [1, 2, 3];",
            "description": "Declares an array of numbers using generic syntax"
          },
          {
            "syntax": "let variable: [string, number] = ['a', 1];",
            "description": "Declares a tuple with specific types for each position"
          }
        ]
      },
      {
        "name": "Interfaces & Types",
        "commands": [
          {
            "syntax": "interface Name { property: type; }",
            "description": "Defines a contract for an object's shape"
          },
          {
            "syntax": "type Name = { property: type; }",
            "description": "Creates a type alias for a specific shape"
          },
          {
            "syntax": "interface Name extends Parent { }",
            "description": "Creates an interface that extends another interface"
          },
          {
            "syntax": "type Name = Type1 | Type2;",
            "description": "Creates a union type that can be either Type1 or Type2"
          },
          {
            "syntax": "type Name = Type1 & Type2;",
            "description": "Creates an intersection type that combines Type1 and Type2"
          },
          {
            "syntax": "interface Name { [key: string]: type; }",
            "description": "Defines an index signature for objects with arbitrary properties"
          }
        ]
      },
      {
        "name": "Functions",
        "commands": [
          {
            "syntax": "function name(param: Type): ReturnType { }",
            "description": "Declares a function with typed parameters and return value"
          },
          {
            "syntax": "const name = (param: Type): ReturnType => { }",
            "description": "Creates an arrow function with typed parameters and return value"
          },
          {
            "syntax": "function name<T>(param: T): T { }",
            "description": "Declares a generic function"
          },
          {
            "syntax": "type FunctionType = (param: Type) => ReturnType;",
            "description": "Defines a function type"
          },
          {
            "syntax": "function name(param?: Type): ReturnType { }",
            "description": "Declares a function with an optional parameter"
          },
          {
            "syntax": "function name(...params: Type[]): ReturnType { }",
            "description": "Declares a function with rest parameters"
          }
        ]
      },
      {
        "name": "Classes",
        "commands": [
          {
            "syntax": "class Name { }",
            "description": "Defines a class"
          },
          {
            "syntax": "class Child extends Parent { }",
            "description": "Defines a class that extends another class"
          },
          {
            "syntax": "class Name implements Interface { }",
            "description": "Defines a class that implements an interface"
          },
          {
            "syntax": "private property: type;",
            "description": "Declares a private property (only accessible within the class)"
          },
          {
            "syntax": "protected property: type;",
            "description": "Declares a protected property (accessible within the class and subclasses)"
          },
          {
            "syntax": "public property: type;",
            "description": "Declares a public property (accessible from anywhere)"
          },
          {
            "syntax": "readonly property: type;",
            "description": "Declares a read-only property"
          },
          {
            "syntax": "static property: type;",
            "description": "Declares a static property (belongs to the class, not instances)"
          }
        ]
      },
      {
        "name": "Advanced Types",
        "commands": [
          {
            "syntax": "type Name = keyof Type;",
            "description": "Creates a type that is a union of all property names of Type"
          },
          {
            "syntax": "type Name = Partial<Type>;",
            "description": "Makes all properties of Type optional"
          },
          {
            "syntax": "type Name = Required<Type>;",
            "description": "Makes all properties of Type required"
          },
          {
            "syntax": "type Name = Pick<Type, Keys>;",
            "description": "Creates a type with only the specified properties of Type"
          },
          {
            "syntax": "type Name = Omit<Type, Keys>;",
            "description": "Creates a type without the specified properties of Type"
          },
          {
            "syntax": "type Name = Record<Keys, Type>;",
            "description": "Creates a type with properties from Keys of type Type"
          },
          {
            "syntax": "type Name = ReturnType<typeof function>;",
            "description": "Extracts the return type of a function"
          }
        ]
      }
    ],
    "examples": [
      {
        "title": "Interface Example",
        "code": "interface User {\n  id: number;\n  name: string;\n  email?: string; // Optional property\n  readonly createdAt: Date; // Read-only property\n}\n\nfunction createUser(user: Omit<User, 'id' | 'createdAt'>): User {\n  return {\n    id: Math.floor(Math.random() * 1000),\n    name: user.name,\n    email: user.email,\n    createdAt: new Date()\n  };\n}\n\nconst newUser = createUser({\n  name: 'John Doe',\n  email: 'john@example.com'\n});\n\nconsole.log(newUser);"
      },
      {
        "title": "Generic Function",
        "code": "function getFirstElement<T>(array: T[]): T | undefined {\n  return array.length > 0 ? array[0] : undefined;\n}\n\nconst numbers = [1, 2, 3];\nconst firstNumber = getFirstElement(numbers); // Type is number\n\nconst strings = ['a', 'b', 'c'];\nconst firstString = getFirstElement(strings); // Type is string\n\n// More complex example with constraints\nfunction merge<T extends object, U extends object>(obj1: T, obj2: U): T & U {\n  return { ...obj1, ...obj2 };\n}\n\nconst merged = merge({ name: 'John' }, { age: 30 }); // Type is { name: string; age: number; }"
      },
      {
        "title": "Type Guards",
        "code": "type Fish = { swim: () => void };\ntype Bird = { fly: () => void };\n\nfunction isFish(pet: Fish | Bird): pet is Fish {\n  return (pet as Fish).swim !== undefined;\n}\n\nfunction move(pet: Fish | Bird) {\n  if (isFish(pet)) {\n    // TypeScript knows pet is Fish here\n    pet.swim();\n  } else {\n    // TypeScript knows pet is Bird here\n    pet.fly();\n  }\n}\n\n// Using instanceof for classes\nclass Dog {\n  bark() { console.log('Woof!'); }\n}\n\nclass Cat {\n  meow() { console.log('Meow!'); }\n}\n\nfunction makeSound(animal: Dog | Cat) {\n  if (animal instanceof Dog) {\n    animal.bark();\n  } else {\n    animal.meow();\n  }\n}"
      }
    ],
    "resources": [
      {
        "title": "TypeScript Documentation",
        "url": "https://www.typescriptlang.org/docs/"
      },
      {
        "title": "TypeScript Playground",
        "url": "https://www.typescriptlang.org/play"
      },
      {
        "title": "TypeScript Deep Dive",
        "url": "https://basarat.gitbook.io/typescript/"
      }
    ]
  },
  {
    "id": "react",
    "title": "React",
    "description": "A JavaScript library for building user interfaces",
    "icon": "code",
    "colorClass": "bg-cyan-500",
    "categories": [
      {
        "name": "Components",
        "commands": [
          {
            "syntax": "function Component() { return <div />; }",
            "description": "Declares a functional component"
          },
          {
            "syntax": "class Component extends React.Component { render() { return <div />; } }",
            "description": "Declares a class component"
          },
          {
            "syntax": "<Component prop={value} />",
            "description": "Renders a component with props"
          },
          {
            "syntax": "{ condition ? <TrueComponent /> : <FalseComponent /> }",
            "description": "Conditional rendering using ternary operator"
          },
          {
            "syntax": "{ condition && <Component /> }",
            "description": "Conditional rendering using logical AND"
          },
          {
            "syntax": "{items.map(item => <Component key={item.id} item={item} />)}",
            "description": "Renders a list of components using map"
          }
        ]
      },
      {
        "name": "Hooks",
        "commands": [
          {
            "syntax": "const [state, setState] = useState(initialValue);",
            "description": "Declares a state variable with a setter function"
          },
          {
            "syntax": "useEffect(() => { }, [dependencies]);",
            "description": "Performs side effects in function components"
          },
          {
            "syntax": "const value = useContext(Context);",
            "description": "Subscribes to a React context"
          },
          {
            "syntax": "const memoizedValue = useMemo(() => computeValue(a, b), [a, b]);",
            "description": "Memoizes a computed value"
          },
          {
            "syntax": "const memoizedCallback = useCallback(() => doSomething(a, b), [a, b]);",
            "description": "Memoizes a callback function"
          },
          {
            "syntax": "const ref = useRef(initialValue);",
            "description": "Creates a mutable ref object"
          },
          {
            "syntax": "const [state, dispatch] = useReducer(reducer, initialState);",
            "description": "An alternative to useState for complex state logic"
          }
        ]
      },
      {
        "name": "Context",
        "commands": [
          {
            "syntax": "const Context = createContext(defaultValue);",
            "description": "Creates a Context object"
          },
          {
            "syntax": "<Context.Provider value={value}>{children}</Context.Provider>",
            "description": "Provides a context value to all children components"
          },
          {
            "syntax": "<Context.Consumer>{value => /* render something */}</Context.Consumer>",
            "description": "Consumes a context value (older pattern)"
          },
          {
            "syntax": "const value = useContext(Context);",
            "description": "Consumes a context value using hooks"
          }
        ]
      },
      {
        "name": "Props & State",
        "commands": [
          {
            "syntax": "function Component({ prop1, prop2 }) { }",
            "description": "Destructures props in a functional component"
          },
          {
            "syntax": "Component.propTypes = { prop: PropTypes.type };",
            "description": "Defines prop types for a component"
          },
          {
            "syntax": "Component.defaultProps = { prop: value };",
            "description": "Defines default props for a component"
          },
          {
            "syntax": "const [state, setState] = useState(initialValue);",
            "description": "Declares a state variable with a setter function"
          },
          {
            "syntax": "setState(newValue);",
            "description": "Updates state with a new value"
          },
          {
            "syntax": "setState(prevState => newState);",
            "description": "Updates state using a function that receives the previous state"
          }
        ]
      },
      {
        "name": "Event Handling",
        "commands": [
          {
            "syntax": "onClick={handleClick}",
            "description": "Attaches a click event handler"
          },
          {
            "syntax": "onChange={e => handleChange(e.target.value)}",
            "description": "Handles input changes"
          },
          {
            "syntax": "onSubmit={handleSubmit}",
            "description": "Handles form submissions"
          },
          {
            "syntax": "e.preventDefault();",
            "description": "Prevents the default action of an event"
          },
          {
            "syntax": "e.stopPropagation();",
            "description": "Stops the event from bubbling up"
          }
        ]
      }
    ],
    "examples": [
      {
        "title": "Functional Component with Hooks",
        "code": "import React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n\n  useEffect(() => {\n    document.title = `Count: ${count}`;\n    \n    // Cleanup function\n    return () => {\n      document.title = 'React App';\n    };\n  }, [count]);\n\n  const increment = () => {\n    setCount(prevCount => prevCount + 1);\n  };\n\n  const decrement = () => {\n    setCount(prevCount => prevCount - 1);\n  };\n\n  const reset = () => {\n    setCount(0);\n    setIsActive(false);\n  };\n\n  return (\n    <div className={`counter ${isActive ? 'active' : ''}`}>\n      <h2>Counter: {count}</h2>\n      <div className=\"buttons\">\n        <button onClick={decrement}>-</button>\n        <button onClick={increment}>+</button>\n        <button onClick={reset}>Reset</button>\n        <button onClick={() => setIsActive(!isActive)}>\n          {isActive ? 'Deactivate' : 'Activate'}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Counter;"
      },
      {
        "title": "Context API Example",
        "code": "import React, { createContext, useContext, useState } from 'react';\n\n// Create a context with a default value\nconst ThemeContext = createContext({\n  theme: 'light',\n  toggleTheme: () => {}\n});\n\n// Provider component\nfunction ThemeProvider({ children }) {\n  const [theme, setTheme] = useState('light');\n  \n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n  \n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\n// Custom hook to use the theme context\nfunction useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n\n// Component that uses the theme\nfunction ThemedButton() {\n  const { theme, toggleTheme } = useTheme();\n  \n  return (\n    <button\n      onClick={toggleTheme}\n      style={{\n        background: theme === 'dark' ? '#333' : '#fff',\n        color: theme === 'dark' ? '#fff' : '#333',\n        padding: '10px 15px',\n        border: '1px solid #ccc',\n        borderRadius: '4px'\n      }}\n    >\n      Toggle Theme (Current: {theme})\n    </button>\n  );\n}\n\n// App component that uses the provider\nfunction App() {\n  return (\n    <ThemeProvider>\n      <div style={{ padding: '20px' }}>\n        <h1>Theme Context Example</h1>\n        <ThemedButton />\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;"
      },
      {
        "title": "Form Handling with React",
        "code": "import React, { useState } from 'react';\n\nfunction ContactForm() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    message: ''\n  });\n  const [errors, setErrors] = useState({});\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n\n  const validate = () => {\n    const newErrors = {};\n    \n    if (!formData.name.trim()) {\n      newErrors.name = 'Name is required';\n    }\n    \n    if (!formData.email.trim()) {\n      newErrors.email = 'Email is required';\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n      newErrors.email = 'Email is invalid';\n    }\n    \n    if (!formData.message.trim()) {\n      newErrors.message = 'Message is required';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    if (validate()) {\n      // Submit the form data\n      console.log('Form submitted:', formData);\n      setIsSubmitted(true);\n      \n      // Reset form after submission\n      setFormData({\n        name: '',\n        email: '',\n        message: ''\n      });\n    }\n  };\n\n  return (\n    <div className=\"form-container\">\n      {isSubmitted ? (\n        <div className=\"success-message\">\n          <h2>Thank you for your message!</h2>\n          <p>We'll get back to you soon.</p>\n          <button onClick={() => setIsSubmitted(false)}>Send another message</button>\n        </div>\n      ) : (\n        <form onSubmit={handleSubmit}>\n          <h2>Contact Us</h2>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"name\">Name</label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              value={formData.name}\n              onChange={handleChange}\n              className={errors.name ? 'error' : ''}\n            />\n            {errors.name && <span className=\"error-message\">{errors.name}</span>}\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"email\">Email</label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              className={errors.email ? 'error' : ''}\n            />\n            {errors.email && <span className=\"error-message\">{errors.email}</span>}\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"message\">Message</label>\n            <textarea\n              id=\"message\"\n              name=\"message\"\n              value={formData.message}\n              onChange={handleChange}\n              rows=\"5\"\n              className={errors.message ? 'error' : ''}\n            />\n            {errors.message && <span className=\"error-message\">{errors.message}</span>}\n          </div>\n          \n          <button type=\"submit\">Send Message</button>\n        </form>\n      )}\n    </div>\n  );\n}\n\nexport default ContactForm;"
      }
    ],
    "resources": [
      {
        "title": "React Documentation",
        "url": "https://reactjs.org/docs/getting-started.html"
      },
      {
        "title": "React Hooks Reference",
        "url": "https://reactjs.org/docs/hooks-reference.html"
      },
      {
        "title": "React TypeScript Cheatsheet",
        "url": "https://github.com/typescript-cheatsheets/react"
      }
    ]
  },
  {
    "id": "nextjs",
    "title": "Next.js",
    "description": "A React framework for production that enables server-side rendering and static site generation",
    "icon": "code",
    "colorClass": "bg-black",
    "categories": [
      {
        "name": "Setup & Configuration",
        "commands": [
          {
            "syntax": "npx create-next-app@latest",
            "description": "Creates a new Next.js application"
          },
          {
            "syntax": "next dev",
            "description": "Starts the development server"
          },
          {
            "syntax": "next build",
            "description": "Builds the application for production"
          },
          {
            "syntax": "next start",
            "description": "Starts the production server"
          },
          {
            "syntax": "next.config.js",
            "description": "Configuration file for Next.js"
          }
        ]
      },
      {
        "name": "Routing (App Router)",
        "commands": [
          {
            "syntax": "app/page.tsx",
            "description": "Defines the main page component for the root route"
          },
          {
            "syntax": "app/about/page.tsx",
            "description": "Defines a page component for the /about route"
          },
          {
            "syntax": "app/[param]/page.tsx",
            "description": "Defines a dynamic route with a parameter"
          },
          {
            "syntax": "app/layout.tsx",
            "description": "Defines a layout that wraps all pages"
          },
          {
            "syntax": "app/[...slug]/page.tsx",
            "description": "Defines a catch-all route"
          },
          {
            "syntax": "app/[[...slug]]/page.tsx",
            "description": "Defines an optional catch-all route"
          },
          {
            "syntax": "app/not-found.tsx",
            "description": "Custom 404 page"
          },
          {
            "syntax": "app/error.tsx",
            "description": "Error boundary for handling errors"
          },
          {
            "syntax": "app/loading.tsx",
            "description": "Loading UI for route segments"
          }
        ]
      },
      {
        "name": "Data Fetching",
        "commands": [
          {
            "syntax": "async function Page() { const data = await getData(); }",
            "description": "Fetches data in a Server Component"
          },
          {
            "syntax": "export async function generateStaticParams() { }",
            "description": "Generates static paths for dynamic routes at build time"
          },
          {
            "syntax": "const res = await fetch('https://...', { cache: 'force-cache' });",
            "description": "Fetches data with caching (similar to getStaticProps)"
          },
          {
            "syntax": "const res = await fetch('https://...', { cache: 'no-store' });",
            "description": "Fetches data on every request (similar to getServerSideProps)"
          },
          {
            "syntax": "const res = await fetch('https://...', { next: { revalidate: 10 } });",
            "description": "Fetches data with ISR (revalidate every 10 seconds)"
          }
        ]
      },
      {
        "name": "API Routes",
        "commands": [
          {
            "syntax": "app/api/route.ts",
            "description": "Defines an API route handler"
          },
          {
            "syntax": "export async function GET(request) { }",
            "description": "Handles GET requests to an API route"
          },
          {
            "syntax": "export async function POST(request) { }",
            "description": "Handles POST requests to an API route"
          },
          {
            "syntax": "export async function PUT(request) { }",
            "description": "Handles PUT requests to an API route"
          },
          {
            "syntax": "export async function DELETE(request) { }",
            "description": "Handles DELETE requests to an API route"
          },
          {
            "syntax": "return NextResponse.json({ data });",
            "description": "Returns a JSON response from an API route"
          }
        ]
      },
      {
        "name": "Server Components & Actions",
        "commands": [
          {
            "syntax": "// Default: Server Component\nexport default function Component() { }",
            "description": "Defines a Server Component (default in App Router)"
          },
          {
            "syntax": "'use client'\n\nexport default function Component() { }",
            "description": "Defines a Client Component"
          },
          {
            "syntax": "'use server'\n\nexport async function action(formData) { }",
            "description": "Defines a Server Action for form submissions"
          },
          {
            "syntax": "<form action={action}>",
            "description": "Uses a Server Action in a form"
          }
        ]
      },
      {
        "name": "Optimization",
        "commands": [
          {
            "syntax": "import Image from 'next/image'",
            "description": "Optimized image component"
          },
          {
            "syntax": "<Image src=\"/image.jpg\" width={500} height={300} alt=\"Description\" />",
            "description": "Renders an optimized image"
          },
          {
            "syntax": "import { useRouter } from 'next/navigation'",
            "description": "Hook for programmatic navigation in Client Components"
          },
          {
            "syntax": "import Link from 'next/link'",
            "description": "Component for client-side navigation between routes"
          },
          {
            "syntax": "<Link href=\"/about\">About</Link>",
            "description": "Creates a link for client-side navigation"
          }
        ]
      }
    ],
    "examples": [
      {
        "title": "App Router Page Component",
        "code": "// app/page.tsx\nexport default async function Home() {\n  // This is a Server Component by default\n  const data = await fetchData();\n  \n  return (\n    <main>\n      <h1 className=\"text-3xl font-bold\">Welcome to Next.js!</h1>\n      <p>Get started by editing app/page.tsx</p>\n      \n      <div className=\"mt-6\">\n        <h2 className=\"text-xl font-semibold\">Data from API:</h2>\n        <pre className=\"bg-gray-100 p-4 rounded mt-2\">\n          {JSON.stringify(data, null, 2)}\n        </pre>\n      </div>\n    </main>\n  );\n}\n\nasync function fetchData() {\n  // This function runs on the server\n  const res = await fetch('https://jsonplaceholder.typicode.com/posts/1', {\n    cache: 'force-cache' // Similar to getStaticProps\n  });\n  \n  if (!res.ok) {\n    throw new Error('Failed to fetch data');\n  }\n  \n  return res.json();\n}"
      },
      {
        "title": "API Route",
        "code": "// app/api/hello/route.ts\nimport { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\n\nexport async function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  const name = searchParams.get('name') || 'World';\n  \n  return NextResponse.json({ message: `Hello, ${name}!` });\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    \n    // Process the data\n    const result = {\n      received: body,\n      timestamp: new Date().toISOString()\n    };\n    \n    return NextResponse.json(result, { status: 201 });\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Invalid JSON payload' },\n      { status: 400 }\n    );\n  }\n}"
      },
      {
        "title": "Server Actions Form",
        "code": "// app/contact/page.tsx\nimport { redirect } from 'next/navigation';\n\n// Server Action\nasync function submitForm(formData: FormData) {\n  'use server';\n  \n  const name = formData.get('name') as string;\n  const email = formData.get('email') as string;\n  const message = formData.get('message') as string;\n  \n  // Validate the data\n  if (!name || !email || !message) {\n    return { error: 'All fields are required' };\n  }\n  \n  // Process the form data (e.g., send an email, store in database)\n  console.log('Form submitted:', { name, email, message });\n  \n  // Redirect after successful submission\n  redirect('/contact/thank-you');\n}\n\nexport default function ContactPage() {\n  return (\n    <div className=\"max-w-md mx-auto my-10 p-6 bg-white rounded-lg shadow-md\">\n      <h1 className=\"text-2xl font-bold mb-6\">Contact Us</h1>\n      \n      <form action={submitForm}>\n        <div className=\"mb-4\">\n          <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Name\n          </label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n            required\n          />\n        </div>\n        \n        <div className=\"mb-4\">\n          <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Email\n          </label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n            required\n          />\n        </div>\n        \n        <div className=\"mb-4\">\n          <label htmlFor=\"message\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n            Message\n          </label>\n          <textarea\n            id=\"message\"\n            name=\"message\"\n            rows={4}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n            required\n          />\n        </div>\n        \n        <button\n          type=\"submit\"\n          className=\"w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 transition-colors\"\n        >\n          Send Message\n        </button>\n      </form>\n    </div>\n  );\n}"
      }
    ],
    "resources": [
      {
        "title": "Next.js Documentation",
        "url": "https://nextjs.org/docs"
      },
      {
        "title": "Learn Next.js",
        "url": "https://nextjs.org/learn"
      },
      {
        "title": "Next.js GitHub Repository",
        "url": "https://github.com/vercel/next.js"
      }
    ]
  },
  {
    "id": "php",
    "title": "PHP",
    "description": "A popular general-purpose scripting language that is especially suited to web development",
    "icon": "code",
    "colorClass": "bg-purple-600",
    "categories": [
      {
        "name": "Basics",
        "commands": [
          {
            "syntax": "<?php ?>",
            "description": "PHP opening and closing tags"
          },
          {
            "syntax": "echo 'string';",
            "description": "Outputs one or more strings"
          },
          {
            "syntax": "print 'string';",
            "description": "Outputs a string"
          },
          {
            "syntax": "$variable = value;",
            "description": "Declares a variable"
          },
          {
            "syntax": "// Comment",
            "description": "Single-line comment"
          },
          {
            "syntax": "/* Comment */",
            "description": "Multi-line comment"
          },
          {
            "syntax": "define('CONSTANT', value);",
            "description": "Defines a constant"
          },
          {
            "syntax": "const CONSTANT = value;",
            "description": "Defines a constant (alternative syntax)"
          }
        ]
      },
      {
        "name": "Data Types & Variables",
        "commands": [
          {
            "syntax": "$string = 'text';",
            "description": "String variable"
          },
          {
            "syntax": "$integer = 42;",
            "description": "Integer variable"
          },
          {
            "syntax": "$float = 3.14;",
            "description": "Floating-point variable"
          },
          {
            "syntax": "$boolean = true;",
            "description": "Boolean variable"
          },
          {
            "syntax": "$array = [1, 2, 3];",
            "description": "Indexed array"
          },
          {
            "syntax": "$array = ['key' => 'value'];",
            "description": "Associative array"
          },
          {
            "syntax": "$null = null;",
            "description": "Null variable"
          }
        ]
      },
      {
        "name": "Control Structures",
        "commands": [
          {
            "syntax": "if (condition) { }",
            "description": "Executes code if condition is true"
          },
          {
            "syntax": "if (condition) { } else { }",
            "description": "Executes different code blocks based on a condition"
          },
          {
            "syntax": "if (condition) { } elseif (condition) { } else { }",
            "description": "Executes different code blocks based on multiple conditions"
          },
          {
            "syntax": "switch (variable) { case value: break; default: break; }",
            "description": "Selects one of many blocks of code to be executed"
          },
          {
            "syntax": "for ($i = 0; $i < 10; $i++) { }",
            "description": "Loops through a block of code a specified number of times"
          },
          {
            "syntax": "foreach ($array as $value) { }",
            "description": "Loops through each element in an array"
          },
          {
            "syntax": "foreach ($array as $key => $value) { }",
            "description": "Loops through each key-value pair in an array"
          },
          {
            "syntax": "while (condition) { }",
            "description": "Loops through a block of code while a condition is true"
          },
          {
            "syntax": "do { } while (condition);",
            "description": "Loops through a block of code once, then repeats if condition is true"
          }
        ]
      },
      {
        "name": "Functions",
        "commands": [
          {
            "syntax": "function name($param) { }",
            "description": "Defines a function"
          },
          {
            "syntax": "function name($param = default) { }",
            "description": "Defines a function with a default parameter value"
          },
          {
            "syntax": "return value;",
            "description": "Returns a value from a function"
          },
          {
            "syntax": "function &name() { }",
            "description": "Defines a function that returns a reference"
          },
          {
            "syntax": "function name(Type $param): ReturnType { }",
            "description": "Defines a function with type hints (PHP 7+)"
          },
          {
            "syntax": "function name(...$params) { }",
            "description": "Defines a function with variable-length argument lists (PHP 5.6+)"
          }
        ]
      },
      {
        "name": "File Handling",
        "commands": [
          {
            "syntax": "include 'file.php';",
            "description": "Includes and evaluates the specified file"
          },
          {
            "syntax": "require 'file.php';",
            "description": "Includes and evaluates the specified file (fatal error if not found)"
          },
          {
            "syntax": "include_once 'file.php';",
            "description": "Includes the specified file only once"
          },
          {
            "syntax": "require_once 'file.php';",
            "description": "Includes the specified file only once (fatal error if not found)"
          },
          {
            "syntax": "$file = fopen('file.txt', 'mode');",
            "description": "Opens a file or URL"
          },
          {
            "syntax": "fwrite($file, 'text');",
            "description": "Writes to an open file"
          },
          {
            "syntax": "fread($file, length);",
            "description": "Reads from an open file"
          },
          {
            "syntax": "fclose($file);",
            "description": "Closes an open file pointer"
          },
          {
            "syntax": "file_get_contents('file.txt');",
            "description": "Reads entire file into a string"
          },
          {
            "syntax": "file_put_contents('file.txt', 'content');",
            "description": "Writes a string to a file"
          }
        ]
      },
      {
        "name": "Database (MySQL)",
        "commands": [
          {
            "syntax": "mysqli_connect(host, username, password, dbname);",
            "description": "Opens a new connection to the MySQL server"
          },
          {
            "syntax": "$conn->query(sql);",
            "description": "Performs a query on the database"
          },
          {
            "syntax": "$stmt = $conn->prepare(sql);",
            "description": "Prepares an SQL statement for execution"
          },
          {
            "syntax": "$stmt->bind_param(types, var1, var2, ...);",
            "description": "Binds variables to a prepared statement as parameters"
          },
          {
            "syntax": "$stmt->execute();",
            "description": "Executes a prepared statement"
          },
          {
            "syntax": "$result = $stmt->get_result();",
            "description": "Gets a result set from a prepared statement"
          },
          {
            "syntax": "$row = $result->fetch_assoc();",
            "description": "Fetches a result row as an associative array"
          },
          {
            "syntax": "mysqli_close($conn);",
            "description": "Closes a previously opened database connection"
          }
        ]
      }
    ],
    "examples": [
      {
        "title": "PHP Form Handling",
        "code": "<?php\n// Define variables and set to empty values\n$name = $email = $message = \"\";\n$nameErr = $emailErr = $messageErr = \"\";\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n  // Validate name\n  if (empty($_POST[\"name\"])) {\n    $nameErr = \"Name is required\";\n  } else {\n    $name = test_input($_POST[\"name\"]);\n    // Check if name only contains letters and whitespace\n    if (!preg_match(\"/^[a-zA-Z-' ]*$/\", $name)) {\n      $nameErr = \"Only letters and white space allowed\";\n    }\n  }\n  \n  // Validate email\n  if (empty($_POST[\"email\"])) {\n    $emailErr = \"Email is required\";\n  } else {\n    $email = test_input($_POST[\"email\"]);\n    // Check if email address is well-formed\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n      $emailErr = \"Invalid email format\";\n    }\n  }\n  \n  // Validate message\n  if (empty($_POST[\"message\"])) {\n    $messageErr = \"Message is required\";\n  } else {\n    $message = test_input($_POST[\"message\"]);\n  }\n  \n  // If no errors, process the form\n  if (empty($nameErr) && empty($emailErr) && empty($messageErr)) {\n    // Process form data (e.g., send email, save to database)\n    echo \"<div class='success'>Thank you for your message!</div>\";\n    \n    // Reset form fields\n    $name = $email = $message = \"\";\n  }\n}\n\n// Function to sanitize input data\nfunction test_input($data) {\n  $data = trim($data);\n  $data = stripslashes($data);\n  $data = htmlspecialchars($data);\n  return $data;\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>PHP Form Example</title>\n  <style>\n    .error { color: red; }\n    .success { color: green; }\n    .form-group { margin-bottom: 15px; }\n  </style>\n</head>\n<body>\n  <h2>Contact Form</h2>\n  <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n    <div class=\"form-group\">\n      <label for=\"name\">Name:</label>\n      <input type=\"text\" name=\"name\" id=\"name\" value=\"<?php echo $name; ?>\">\n      <span class=\"error\"><?php echo $nameErr; ?></span>\n    </div>\n    \n    <div class=\"form-group\">\n      <label for=\"email\">Email:</label>\n      <input type=\"email\" name=\"email\" id=\"email\" value=\"<?php echo $email; ?>\">\n      <span class=\"error\"><?php echo $emailErr; ?></span>\n    </div>\n    \n    <div class=\"form-group\">\n      <label for=\"message\">Message:</label>\n      <textarea name=\"message\" id=\"message\" rows=\"5\"><?php echo $message; ?></textarea>\n      <span class=\"error\"><?php echo $messageErr; ?></span>\n    </div>\n    \n    <button type=\"submit\">Submit</button>\n  </form>\n</body>\n</html>"
      },
      {
        "title": "Database Connection and Query",
        "code": "<?php\n// Database connection parameters\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n  die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Prepare and execute a query with parameters (safer against SQL injection)\nfunction getUserById($conn, $id) {\n  // Prepare statement\n  $stmt = $conn->prepare(\"SELECT id, name, email FROM users WHERE id = ?\");\n  $stmt->bind_param(\"i\", $id); // \"i\" indicates the parameter is an integer\n  \n  // Execute query\n  $stmt->execute();\n  \n  // Get results\n  $result = $stmt->get_result();\n  \n  if ($result->num_rows > 0) {\n    // Fetch data as associative array\n    return $result->fetch_assoc();\n  } else {\n    return null; // No user found\n  }\n  \n  // Close statement\n  $stmt->close();\n}\n\n// Insert a new user\nfunction addUser($conn, $name, $email, $password) {\n  // Hash the password for security\n  $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n  \n  // Prepare statement\n  $stmt = $conn->prepare(\"INSERT INTO users (name, email, password) VALUES (?, ?, ?)\");\n  $stmt->bind_param(\"sss\", $name, $email, $hashedPassword); // \"sss\" indicates all parameters are strings\n  \n  // Execute and check if successful\n  if ($stmt->execute()) {\n    return $conn->insert_id; // Return the ID of the newly inserted user\n  } else {\n    return false; // Insert failed\n  }\n  \n  // Close statement\n  $stmt->close();\n}\n\n// Example usage\n$userId = 1;\n$user = getUserById($conn, $userId);\n\nif ($user) {\n  echo \"User found: \" . $user[\"name\"] . \" (\" . $user[\"email\"] . \")\";\n} else {\n  echo \"No user found with ID \" . $userId;\n}\n\n// Example of adding a new user\n$newUserId = addUser($conn, \"John Doe\", \"john@example.com\", \"securepassword\");\n\nif ($newUserId) {\n  echo \"<br>New user added with ID: \" . $newUserId;\n} else {\n  echo \"<br>Failed to add new user\";\n}\n\n// Close connection\n$conn->close();\n?>"
      },
      {
        "title": "PHP OOP Example",
        "code": "<?php\n// Define a simple class\nclass User {\n  // Properties\n  private $id;\n  private $name;\n  private $email;\n  private $createdAt;\n  \n  // Constructor\n  public function __construct($name, $email) {\n    $this->name = $name;\n    $this->email = $email;\n    $this->createdAt = new DateTime();\n  }\n  \n  // Getters and setters\n  public function getId() {\n    return $this->id;\n  }\n  \n  public function setId($id) {\n    $this->id = $id;\n  }\n  \n  public function getName() {\n    return $this->name;\n  }\n  \n  public function setName($name) {\n    $this->name = $name;\n  }\n  \n  public function getEmail() {\n    return $this->email;\n  }\n  \n  public function setEmail($email) {\n    $this->email = $email;\n  }\n  \n  public function getCreatedAt() {\n    return $this->createdAt;\n  }\n  \n  // Method to display user information\n  public function displayInfo() {\n    return \"User: {$this->name}, Email: {$this->email}, Created: {$this->createdAt->format('Y-m-d H:i:s')}\";\n  }\n}\n\n// Inheritance example\nclass Admin extends User {\n  private $role = 'admin';\n  private $permissions = [];\n  \n  public function __construct($name, $email, $permissions = []) {\n    parent::__construct($name, $email);\n    $this->permissions = $permissions;\n  }\n  \n  public function getRole() {\n    return $this->role;\n  }\n  \n  public function getPermissions() {\n    return $this->permissions;\n  }\n  \n  public function addPermission($permission) {\n    if (!in_array($permission, $this->permissions)) {\n      $this->permissions[] = $permission;\n    }\n  }\n  \n  // Override the displayInfo method\n  public function displayInfo() {\n    $parentInfo = parent::displayInfo();\n    $permissionsStr = implode(', ', $this->permissions);\n    return \"$parentInfo, Role: {$this->role}, Permissions: $permissionsStr\";\n  }\n}\n\n// Create a regular user\n$user = new User(\"John Doe\", \"john@example.com\");\n$user->setId(1);\necho $user->displayInfo() . \"<br>\";\n\n// Create an admin user\n$admin = new Admin(\"Jane Smith\", \"jane@example.com\", ['create', 'read', 'update', 'delete']);\n$admin->setId(2);\necho $admin->displayInfo() . \"<br>\";\n\n// Add a permission to the admin\n$admin->addPermission('manage_users');\necho \"Updated permissions: \" . $admin->displayInfo();\n?>"
      }
    ],
    "resources": [
      {
        "title": "PHP Documentation",
        "url": "https://www.php.net/docs.php"
      },
      {
        "title": "PHP: The Right Way",
        "url": "https://phptherightway.com/"
      },
      {
        "title": "W3Schools PHP Tutorial",
        "url": "https://www.w3schools.com/php/"
      }
    ]
  }
]
