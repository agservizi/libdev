// Schema Prisma per il database

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Puoi cambiare in "mysql", "sqlite", ecc.
  url      = env("DATABASE_URL")
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  files       File[]
  users       ProjectUser[]
}

model File {
  id           String   @id @default(uuid())
  name         String
  path         String
  content      String   @db.Text
  language     String
  lastModified DateTime @default(now())
  projectId    String
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Setting {
  id    String @id
  value Json
}

model User {
  id        String        @id @default(uuid())
  email     String        @unique
  name      String?
  password  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  projects  ProjectUser[]
  snippets  Snippet[]
}

model Library {
  id          String   @id @default(uuid())
  name        String
  version     String
  description String?
  language    String
  url         String?
  stars       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Snippet {
  id          String   @id @default(uuid())
  title       String
  description String?
  code        String   @db.Text
  language    String
  tags        String[]
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Extension {
  id            String   @id @default(uuid())
  name          String
  publisher     String
  version       String
  description   String?
  icon          String?
  downloadCount Int      @default(0)
  rating        Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ProjectUser {
  projectId String
  userId    String
  role      String   @default("editor")
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([projectId, userId])
}
